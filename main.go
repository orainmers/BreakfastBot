package main

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	botToken    = "7951456204:AAF_39lpVE3niamHcvV-6LLb51nD758IlWs"
	adminChatID = int64(401424871)
)

type Dish struct {
	Name        string
	Price       int
	ImageURL    string
	Description string
	Time        string
	Category    string
}

var menu = []Dish{
	// –ó–∞–≤—Ç—Ä–∞–∫–∏
	{
		Name:        "üç≥ –Ø–∏—á–Ω–∏—Ü–∞",
		Price:       3,
		ImageURL:    "https://sitandeat.ru/upload/resize_cache/iblock/3e8/1200_1200_2/mly7arvbo06n3xwof1h2ybkybs3b3ik7.jpg",
		Description: "–° —Ç–æ—á–µ—á–∫–∞–º–∏ –∫–µ—Ç—á—É–ø–∞ —Å–≤–µ—Ä—Ö—É :)",
		Time:        "20 –º–∏–Ω",
		Category:    "–ó–∞–≤—Ç—Ä–∞–∫–∏",
	},
	{
		Name:        "ü•ö –û–º–ª–µ—Ç",
		Price:       4,
		ImageURL:    "https://img.delo-vcusa.ru/2019/09/omlet-s-sirom.jpg",
		Description: "–ù–µ–∂–Ω—ã–π –æ–º–ª–µ—Ç —Å –º–æ–ª–æ–∫–æ–º",
		Time:        "20 –º–∏–Ω",
		Category:    "–ó–∞–≤—Ç—Ä–∞–∫–∏",
	},
	{
		Name:        "ü•£ –ú–∞–Ω–Ω–∞—è –∫–∞—à–∞",
		Price:       5,
		ImageURL:    "https://static.1000.menu/img/content-v2/70/64/23581/mannaya-kasha-na-moloke-bez-komochkov_1601056376_8_max.jpg",
		Description: "–ù–µ–∂–Ω–∞—è –∫–∞—à–∞ —Å –º–∞—Å–ª–æ–º",
		Time:        "25 –º–∏–Ω",
		Category:    "–ó–∞–≤—Ç—Ä–∞–∫–∏",
	},
	{
		Name:        "ü•™ –ë—É—Ç–µ—Ä–±—Ä–æ–¥–∏–∫",
		Price:       3,
		ImageURL:    "https://cdn.botanichka.ru/wp-content/uploads/2024/01/goryachij-buterbrod-s-syrom-i-pomidorami-0.jpg",
		Description: "–° —Ç–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–π –∫—É—Ö–Ω–µ :)",
		Time:        "10 –º–∏–Ω",
		Category:    "–ó–∞–≤—Ç—Ä–∞–∫–∏",
	},

	// –ù–∞–ø–∏—Ç–∫–∏
	{
		Name:        "üçµ –ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º",
		Price:       2,
		ImageURL:    "https://main-cdn.sbermegamarket.ru/big2/hlr-system/758/393/980/330/189/100023256907b1.jpg",
		Description: "–í–∫—É—Å–Ω—ã–π —á–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º",
		Time:        "5 –º–∏–Ω",
		Category:    "–ù–∞–ø–∏—Ç–∫–∏",
	},
	{
		Name:        "üçµ –ß–∞–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞",
		Price:       1,
		ImageURL:    "https://main-cdn.sbermegamarket.ru/big2/hlr-system/758/393/980/330/189/100023256907b1.jpg",
		Description: "–ß–∞–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä—ã—â–∏–∫–æ–≤",
		Time:        "5 –º–∏–Ω",
		Category:    "–ù–∞–ø–∏—Ç–∫–∏",
	},
	{
		Name:        "üíß –í–æ–¥–∏—á–∫–∞",
		Price:       1,
		ImageURL:    "https://stav-history.ru/wp-content/uploads/2019/03/85874599.jpg",
		Description: "–°—Ç–∞–∫–∞–Ω—á–∏–∫ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–π –≤–æ–¥—ã",
		Time:        "2 –º–∏–Ω",
		Category:    "–ù–∞–ø–∏—Ç–∫–∏",
	},

	// –•–ª–µ–±
	{
		Name:        "üçû –ë–µ–ª—ã–π —Ö–ª–µ–± —Å –º–∞—Å–ª–æ–º",
		Price:       1,
		ImageURL:    "https://www.m24.ru/b/d/nBkSUhL2hFghnMeyIr6BrNOp2Z318Ji-mijFnuWR9mOBdDebBizCnTY8qdJf6ReJ58vU9meMMok3Ee2nhSR6ISeO9G1N_wjJ=GkckcD-gTxuFJl0F8hqLcw.jpg",
		Description: "–°–≤–µ–∂–∏–π –±–µ–ª—ã–π —Ö–ª–µ–± —Å –º–∞—Å–ª–æ–º",
		Time:        "3 –º–∏–Ω",
		Category:    "–•–ª–µ–±",
	},
	{
		Name:        "ü•ñ –•–ª–µ–± '–¢–∞—Ä—Ç—É' —Å –º–∞—Å–ª–æ–º",
		Price:       1,
		ImageURL:    "https://www.tablicakalorijnosti.ru/file/image/foodstuff/22492b9099f44aa99bc7421a015c0796/6c628404cd014e4abfed08b68d96fdd7",
		Description: "–ê—Ä–æ–º–∞—Ç–Ω—ã–π —Ö–ª–µ–± '–¢–∞—Ä—Ç—É' —Å –º–∞—Å–ª–æ–º",
		Time:        "3 –º–∏–Ω",
		Category:    "–•–ª–µ–±",
	},
	{
		Name:        "üçû –ü–æ–¥–∂–∞—Ä–µ–Ω–Ω—ã–π –±–µ–ª—ã–π —Ö–ª–µ–± —Å –º–∞—Å–ª–æ–º",
		Price:       1,
		ImageURL:    "https://www.m24.ru/b/d/nBkSUhL2hFghnMeyIr6BrNOp2Z318Ji-mijFnuWR9mOBdDebBizCnTY8qdJf6ReJ58vU9meMMok3Ee2nhSR6ISeO9G1N_wjJ=GkckcD-gTxuFJl0F8hqLcw.jpg",
		Description: "–•—Ä—É—Å—Ç—è—â–∏–π –ø–æ–¥–∂–∞—Ä–µ–Ω–Ω—ã–π —Ö–ª–µ–± —Å –º–∞—Å–ª–æ–º",
		Time:        "5 –º–∏–Ω",
		Category:    "–•–ª–µ–±",
	},
	{
		Name:        "ü•ñ –ü–æ–¥–∂–∞—Ä–µ–Ω–Ω—ã–π '–¢–∞—Ä—Ç—É' —Å –º–∞—Å–ª–æ–º",
		Price:       1,
		ImageURL:    "https://www.tablicakalorijnosti.ru/file/image/foodstuff/22492b9099f44aa99bc7421a015c0796/6c628404cd014e4abfed08b68d96fdd7",
		Description: "–ü–æ–¥–∂–∞—Ä–µ–Ω–Ω—ã–π —Ö–ª–µ–± '–¢–∞—Ä—Ç—É' —Å –º–∞—Å–ª–æ–º",
		Time:        "5 –º–∏–Ω",
		Category:    "–•–ª–µ–±",
	},
	{
		Name:        "üçû –ü–æ–¥–∂–∞—Ä–µ–Ω–Ω—ã–π —Ç–æ—Å—Ç —Å –º–∞—Å–ª–æ–º",
		Price:       1,
		ImageURL:    "https://img.freepik.com/premium-photo/delicious-crispy-toast-with-butter-isolated-white_495423-50544.jpg",
		Description: "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ç–æ—Å—Ç —Å –º–∞—Å–ª–æ–º",
		Time:        "5 –º–∏–Ω",
		Category:    "–•–ª–µ–±",
	},
}

var categories = []string{
	"–ó–∞–≤—Ç—Ä–∞–∫–∏",
	"–ù–∞–ø–∏—Ç–∫–∏",
	"–•–ª–µ–±",
}

type CartItem struct {
	Dish     Dish
	Quantity int
}

var userCarts = make(map[int64][]CartItem)
var compliments = []string{
	"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üíã",
	"–î–æ–±–∞–≤–∏–ª, –∑–∞–π–∫–∞! üå∏",
	"–ú–º–º, –≤–∫—É—Å–Ω—è—Ç–∏–Ω–∞! üòã",
}

func main() {
	rand.Seed(time.Now().UnixNano())

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	switch msg.Text {
	case "/start":
		sendWelcome(bot, msg.Chat.ID)
	case "/menu":
		sendCategoryMenu(bot, msg.Chat.ID)
	case "/cart":
		showCart(bot, msg.Chat.ID)
	default:
		sendDefaultResponse(bot, msg.Chat.ID)
	}
}

func sendWelcome(bot *tgbotapi.BotAPI, chatID int64) {
	welcomeText := `üåü *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ê–Ω–µ—á–∫–∞!* üåü

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ—Å—Ç–æ—Ä–∞–Ω –ì—é—Å—Ç–æ! 
–°–µ–≥–æ–¥–Ω—è –Ω–∞ –∫—É—Ö–Ω–µ —à–µ—Ñ-–ø–æ–≤–∞—Ä –í–ª–∞–¥ –≥–æ—Ç–æ–≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è:

üç≥ –í–∫—É—Å–Ω–µ–π—à–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏
‚òï –ê—Ä–æ–º–∞—Ç–Ω—ã–π —á–∞–π
üçû –•–ª–µ–±—É—à–µ–∫`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üçΩÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "show_categories"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendCategoryMenu(bot *tgbotapi.BotAPI, chatID int64) {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
	for i := 0; i < len(categories); i += 2 {
		var row []tgbotapi.InlineKeyboardButton
		if i < len(categories) {
			row = append(row, tgbotapi.NewInlineKeyboardButtonData(categories[i], "category_"+categories[i]))
		}
		if i+1 < len(categories) {
			row = append(row, tgbotapi.NewInlineKeyboardButtonData(categories[i+1], "category_"+categories[i+1]))
		}
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üõí –ö–æ—Ä–∑–∏–Ω–∞", "show_cart"),
	})

	msg := tgbotapi.NewMessage(chatID, "üè∑ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func sendDishesMenu(bot *tgbotapi.BotAPI, chatID int64, category string) {
	var dishesInCategory []int // –∏–Ω–¥–µ–∫—Å—ã –±–ª—é–¥ –≤ menu
	for i, dish := range menu {
		if dish.Category == category {
			dishesInCategory = append(dishesInCategory, i)
		}
	}

	if len(dishesInCategory) == 0 {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s' –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥ üòî", category))
		bot.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±–ª—é–¥ (–ø–æ 2 –≤ —Ä—è–¥)
	var rows [][]tgbotapi.InlineKeyboardButton
	for i := 0; i < len(dishesInCategory); i += 2 {
		var row []tgbotapi.InlineKeyboardButton
		idx := dishesInCategory[i]
		dish := menu[idx]
		btnText := fmt.Sprintf("%s - üíã%d", dish.Name, dish.Price)
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(btnText, fmt.Sprintf("dish_%d", idx)))
		if i+1 < len(dishesInCategory) {
			idx2 := dishesInCategory[i+1]
			dish2 := menu[idx2]
			btnText2 := fmt.Sprintf("%s - üíã%d", dish2.Name, dish2.Price)
			row = append(row, tgbotapi.NewInlineKeyboardButtonData(btnText2, fmt.Sprintf("dish_%d", idx2)))
		}
		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show_categories"),
		tgbotapi.NewInlineKeyboardButtonData("üõí –ö–æ—Ä–∑–∏–Ω–∞", "show_cart"),
	})

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üçΩ *%s*\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", category))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func showDishDetails(bot *tgbotapi.BotAPI, chatID int64, dishIdx int) {
	if dishIdx < 0 || dishIdx >= len(menu) {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
		bot.Send(msg)
		return
	}
	selectedDish := menu[dishIdx]

	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(selectedDish.ImageURL))
	photo.Caption = fmt.Sprintf(
		"*%s*\n%s\n\n‚è∞ %s  |  üíã %d –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤",
		selectedDish.Name,
		selectedDish.Description,
		selectedDish.Time,
		selectedDish.Price,
	)
	photo.ParseMode = "Markdown"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", fmt.Sprintf("add_%d", dishIdx)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", "category_"+selectedDish.Category),
			tgbotapi.NewInlineKeyboardButtonData("üõí –ö–æ—Ä–∑–∏–Ω–∞", "show_cart"),
		),
	)
	photo.ReplyMarkup = keyboard

	bot.Send(photo)
}

func showCart(bot *tgbotapi.BotAPI, chatID int64) {
	cart := userCarts[chatID]
	if len(cart) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞...")
		bot.Send(msg)
		return
	}

	var total int
	var cartText strings.Builder
	cartText.WriteString("üåü *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n")

	for i, item := range cart {
		itemTotal := item.Dish.Price * item.Quantity
		cartText.WriteString(
			fmt.Sprintf("%d. *%s*\n   x%d  |  üíã %d\n\n",
				i+1,
				item.Dish.Name,
				item.Quantity,
				itemTotal,
			),
		)
		total += itemTotal
	}

	// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
	maxTime := 0
	for _, item := range cart {
		if t, err := strconv.Atoi(strings.TrimSuffix(item.Dish.Time, " –º–∏–Ω")); err == nil {
			if t > maxTime {
				maxTime = t
			}
		}
	}
	totalTime := maxTime + 10

	cartText.WriteString(fmt.Sprintf("üíã *–ò—Ç–æ–≥–æ:* %d –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤\n‚è∞ *–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:* %d –º–∏–Ω", total, totalTime))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "checkout"),
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "clear_cart"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "show_categories"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, cartText.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	switch {
	case data == "show_categories":
		bot.Send(tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID))
		sendCategoryMenu(bot, chatID)
	case strings.HasPrefix(data, "category_"):
		category := strings.TrimPrefix(data, "category_")
		bot.Send(tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID))
		sendDishesMenu(bot, chatID, category)
	case strings.HasPrefix(data, "dish_"):
		dishIdxStr := strings.TrimPrefix(data, "dish_")
		dishIdx, err := strconv.Atoi(dishIdxStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –±–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			bot.Send(msg)
			return
		}
		bot.Send(tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID))
		showDishDetails(bot, chatID, dishIdx)
	case data == "show_cart":
		showCart(bot, chatID)
	case strings.HasPrefix(data, "add_"):
		dishIdxStr := strings.TrimPrefix(data, "add_")
		dishIdx, err := strconv.Atoi(dishIdxStr)
		if err != nil {
			return
		}
		addToCart(bot, chatID, dishIdx)
		answer := tgbotapi.NewCallback(callback.ID, compliments[rand.Intn(len(compliments))])
		bot.Send(answer)
	case data == "clear_cart":
		delete(userCarts, chatID)
		answer := tgbotapi.NewCallback(callback.ID, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üå∏")
		bot.Send(answer)
		showCart(bot, chatID)
	case data == "checkout":
		processOrder(bot, chatID)
		answer := tgbotapi.NewCallback(callback.ID, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üíå")
		bot.Send(answer)
	case strings.HasPrefix(data, "complete_"):
		userIDStr := strings.TrimPrefix(data, "complete_")
		userID, err := strconv.ParseInt(userIDStr, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ userID: %v", err)
			return
		}

		msg := tgbotapi.NewMessage(userID, "üéâ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üíã")
		bot.Send(msg)

		answer := tgbotapi.NewCallback(callback.ID, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
		bot.Send(answer)

		if callback.Message != nil {
			bot.Send(tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID))
		}
	default:
		answer := tgbotapi.NewCallback(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
		bot.Send(answer)
	}
}

func addToCart(bot *tgbotapi.BotAPI, chatID int64, dishIdx int) {
	if dishIdx < 0 || dishIdx >= len(menu) {
		return
	}
	dish := menu[dishIdx]
	for i, item := range userCarts[chatID] {
		if item.Dish.Name == dish.Name {
			userCarts[chatID][i].Quantity++
			return
		}
	}
	userCarts[chatID] = append(userCarts[chatID], CartItem{Dish: dish, Quantity: 1})
}

func processOrder(bot *tgbotapi.BotAPI, chatID int64) {
	confirmationText := `üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!*

–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. 
–û–ø–ª–∞—Ç–∞: –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ üíã

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû`

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL("https://www.cdn.memify.ru/media/chuUwsZJgwFASPiDQrBXFg/20240927/5454042673154484697.jpg"))
	photo.Caption = confirmationText
	photo.ParseMode = "Markdown"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üçΩ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "show_categories"),
		),
	)
	photo.ReplyMarkup = keyboard

	bot.Send(photo)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
	var orderText strings.Builder
	orderText.WriteString(fmt.Sprintf("üî• *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"))

	chat, err := bot.GetChat(tgbotapi.ChatInfoConfig{
		ChatConfig: tgbotapi.ChatConfig{
			ChatID: chatID,
		},
	})

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: %v", err)
		orderText.WriteString(fmt.Sprintf("–û—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: %d)\n\n", chatID))
	} else {
		orderText.WriteString(fmt.Sprintf("–û—Ç: @%s (ID: %d)\n\n", chat.UserName, chatID))
	}

	total := 0
	for _, item := range userCarts[chatID] {
		itemTotal := item.Dish.Price * item.Quantity
		orderText.WriteString(fmt.Sprintf("‚Ä¢ %s x%d = üíã%d\n", item.Dish.Name, item.Quantity, itemTotal))
		total += itemTotal
	}

	orderText.WriteString(fmt.Sprintf("\nüíã *–ò—Ç–æ–≥–æ:* %d –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤", total))

	adminMsg := tgbotapi.NewMessage(adminChatID, orderText.String())
	adminMsg.ParseMode = "Markdown"

	keyboard = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", fmt.Sprintf("complete_%d", chatID)),
		),
	)
	adminMsg.ReplyMarkup = keyboard

	bot.Send(adminMsg)

	delete(userCarts, chatID)
}

func sendDefaultResponse(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, `–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòî

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/cart - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É`)
	bot.Send(msg)
}
