package main

import (
	"fmt"
	"log"
	"math/rand"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	botToken    = "7951456204:AAF_39lpVE3niamHcvV-6LLb51nD758IlWs"
	adminChatID = int64(401424871)
)

type Dish struct {
	Name        string
	Price       int
	ImageURL    string
	Description string
	Time        string
	Category    string
}

var menu = []Dish{
	{
		Name:        "ü•ë –¢–æ—Å—Ç —Å –∞–≤–æ–∫–∞–¥–æ",
		Price:       6,
		ImageURL:    "https://example.com/avocado_toast.jpg",
		Description: "–ù–∞ —á–∏–∞–±–∞—Ç—Ç–µ —Å –∫—É–Ω–∂—É—Ç–æ–º –∏ —è–π—Ü–æ–º –ø–∞—à–æ—Ç",
		Time:        "20 –º–∏–Ω",
		Category:    "–ì–æ—Ä—è—á–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏",
	},
	{
		Name:        "‚òï –ö–æ—Ñ–µ –ª–∞—Ç—Ç–µ",
		Price:       4,
		ImageURL:    "https://example.com/latte.jpg",
		Description: "–° –Ω–µ–∂–Ω—ã–º –º–æ–ª–æ—á–Ω—ã–º –ø–µ–Ω–∫–æ–º –∏ —Å–µ—Ä–¥–µ—á–∫–æ–º",
		Time:        "10 –º–∏–Ω",
		Category:    "–ù–∞–ø–∏—Ç–∫–∏",
	},
	{
		Name:        "üçµ –ß–∞–π",
		Price:       1,
		ImageURL:    "https://example.com/tea.jpg",
		Description: "–ï–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç",
		Time:        "10 –º–∏–Ω",
		Category:    "–ù–∞–ø–∏—Ç–∫–∏",
	},
	{
		Name:        "ü•ê –ö—Ä—É–∞—Å—Å–∞–Ω",
		Price:       5,
		ImageURL:    "https://example.com/croissant.jpg",
		Description: "–°–≤–µ–∂–∞—è –≤—ã–ø–µ—á–∫–∞ —Å –¥–∂–µ–º–æ–º",
		Time:        "15 –º–∏–Ω",
		Category:    "–î–µ—Å–µ—Ä—Ç—ã",
	},
}

var categories = []string{
	"–ì–æ—Ä—è—á–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏",
	"–ù–∞–ø–∏—Ç–∫–∏",
	"–î–µ—Å–µ—Ä—Ç—ã",
}

type CartItem struct {
	Dish     Dish
	Quantity int
}

var userCarts = make(map[int64][]CartItem)
var compliments = []string{
	"–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üíã",
	"–í–∞—à –≤–∫—É—Å –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª–µ–Ω! üòç",
	"–î–æ–±–∞–≤–∏–ª–∞, —Å–æ–ª–Ω—ã—à–∫–æ! üå∏",
	"–ú–º–º, —ç—Ç–æ –º–æ—ë –ª—é–±–∏–º–æ–µ! üíï",
}

func main() {
	rand.Seed(time.Now().UnixNano())

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	switch msg.Text {
	case "/start":
		sendWelcome(bot, msg.Chat.ID)
	case "/menu":
		sendCategoryMenu(bot, msg.Chat.ID)
	case "/cart":
		showCart(bot, msg.Chat.ID)
	default:
		sendDefaultResponse(bot, msg.Chat.ID)
	}
}

func sendWelcome(bot *tgbotapi.BotAPI, chatID int64) {
	welcomeText := `üåü *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ!* üåü

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ª–µ—Ç–Ω—é—é –∫–∞—Ñ–µ—à–∫—É! 
–°–µ–≥–æ–¥–Ω—è –Ω–∞ –∫—É—Ö–Ω–µ —à–µ—Ñ-–ø–æ–≤–∞—Ä –ï–≤–∞ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è:

üç≥ –í–∫—É—Å–Ω–µ–π—à–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∏
‚òï –ê—Ä–æ–º–∞—Ç–Ω—ã–π –∫–æ—Ñ–µ
üçì –°–≤–µ–∂–∏–µ –¥–µ—Å–µ—Ä—Ç—ã`

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üçΩÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", "show_categories"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, welcomeText)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendCategoryMenu(bot *tgbotapi.BotAPI, chatID int64) {
	var rows [][]tgbotapi.InlineKeyboardButton

	// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
	for i := 0; i < len(categories); i += 2 {
		var row []tgbotapi.InlineKeyboardButton
		if i < len(categories) {
			row = append(row, tgbotapi.NewInlineKeyboardButtonData(categories[i], "category_"+categories[i]))
		}
		if i+1 < len(categories) {
			row = append(row, tgbotapi.NewInlineKeyboardButtonData(categories[i+1], "category_"+categories[i+1]))
		}
		rows = append(rows, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
	rows = append(rows, []tgbotapi.InlineKeyboardButton{
		tgbotapi.NewInlineKeyboardButtonData("üõí –ö–æ—Ä–∑–∏–Ω–∞", "show_cart"),
	})

	msg := tgbotapi.NewMessage(chatID, "üè∑ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	bot.Send(msg)
}

func sendDishesByCategory(bot *tgbotapi.BotAPI, chatID int64, category string) {
	// –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	var dishesInCategory []Dish
	for _, dish := range menu {
		if dish.Category == category {
			dishesInCategory = append(dishesInCategory, dish)
		}
	}

	if len(dishesInCategory) == 0 {
		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '%s' –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥ üòî\n–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é /menu", category))
		bot.Send(msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	headerMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üçΩ *%s*\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:", category))
	headerMsg.ParseMode = "Markdown"
	bot.Send(headerMsg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
	for _, dish := range dishesInCategory {
		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
		photo := tgbotapi.NewPhoto(chatID, tgbotapi.FileURL(dish.ImageURL))
		photo.Caption = fmt.Sprintf(
			"*%s*\n%s\n\n‚è∞ %s  |  üíã %d –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤",
			dish.Name,
			dish.Description,
			dish.Time,
			dish.Price,
		)
		photo.ParseMode = "Markdown"

		// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ñ–æ—Ç–æ
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å", fmt.Sprintf("add_%s", dish.Name)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show_categories"),
				tgbotapi.NewInlineKeyboardButtonData("üõí –ö–æ—Ä–∑–∏–Ω–∞", "show_cart"),
			),
		)
		photo.ReplyMarkup = keyboard

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		if _, err := bot.Send(photo); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–ª—é–¥–∞: %v", err)

			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º
			msg := tgbotapi.NewMessage(chatID, photo.Caption)
			msg.ParseMode = "Markdown"
			msg.ReplyMarkup = keyboard
			bot.Send(msg)
		}

		time.Sleep(200 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
	}
}

func showCart(bot *tgbotapi.BotAPI, chatID int64) {
	cart := userCarts[chatID]
	if len(cart) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞...")
		bot.Send(msg)
		return
	}

	var total int
	var cartText strings.Builder
	cartText.WriteString("üåü *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n")

	for i, item := range cart {
		itemTotal := item.Dish.Price * item.Quantity
		cartText.WriteString(
			fmt.Sprintf("%d. *%s*\n   x%d  |  üíã %d\n\n",
				i+1,
				item.Dish.Name,
				item.Quantity,
				itemTotal,
			),
		)
		total += itemTotal
	}

	// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
	maxTime := 0
	for _, item := range cart {
		if t, err := strconv.Atoi(strings.TrimSuffix(item.Dish.Time, " –º–∏–Ω")); err == nil {
			if t > maxTime {
				maxTime = t
			}
		}
	}
	totalTime := maxTime + 10

	cartText.WriteString(fmt.Sprintf("üíã *–ò—Ç–æ–≥–æ:* %d –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤\n‚è∞ *–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:* %d –º–∏–Ω", total, totalTime))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "checkout"),
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "clear_cart"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "show_categories"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, cartText.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func handleCallback(bot *tgbotapi.BotAPI, callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	switch {
	case data == "show_categories":
		bot.Send(tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID))
		sendCategoryMenu(bot, chatID)
	case strings.HasPrefix(data, "category_"):
		category := strings.TrimPrefix(data, "category_")
		sendDishesByCategory(bot, chatID, category)
	case data == "show_cart":
		showCart(bot, chatID)
	case strings.HasPrefix(data, "add_"):
		dishName := strings.TrimPrefix(data, "add_")
		addToCart(bot, chatID, dishName)
		answer := tgbotapi.NewCallback(callback.ID, compliments[rand.Intn(len(compliments))])
		bot.Send(answer)
	case data == "clear_cart":
		delete(userCarts, chatID)
		answer := tgbotapi.NewCallback(callback.ID, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ üå∏")
		bot.Send(answer)
		showCart(bot, chatID)
	case data == "checkout":
		processOrder(bot, chatID)
		answer := tgbotapi.NewCallback(callback.ID, "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üíå")
		bot.Send(answer)
	case strings.HasPrefix(data, "complete_"):
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" —É –∞–¥–º–∏–Ω–∞
		userIDStr := strings.TrimPrefix(data, "complete_")
		userID, err := strconv.ParseInt(userIDStr, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ userID: %v", err)
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(userID, "üéâ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üíã")
		bot.Send(msg)

		// –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω—É
		answer := tgbotapi.NewCallback(callback.ID, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
		bot.Send(answer)

		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–æ–º —É –∞–¥–º–∏–Ω–∞
		if callback.Message != nil {
			bot.Send(tgbotapi.NewDeleteMessage(chatID, callback.Message.MessageID))
		}
	default:
		answer := tgbotapi.NewCallback(callback.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
		bot.Send(answer)
	}
}

func addToCart(bot *tgbotapi.BotAPI, chatID int64, dishName string) {
	for _, dish := range menu {
		if dish.Name == dishName {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ
			for i, item := range userCarts[chatID] {
				if item.Dish.Name == dishName {
					userCarts[chatID][i].Quantity++
					return
				}
			}
			// –ï—Å–ª–∏ –±–ª—é–¥–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º
			userCarts[chatID] = append(userCarts[chatID], CartItem{Dish: dish, Quantity: 1})
			return
		}
	}
}

func processOrder(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	confirmationText := `üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!*

–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. 
–û–ø–ª–∞—Ç–∞: –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ üíã

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üåû

–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é: /menu`

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewMessage(chatID, confirmationText)
	msg.ParseMode = "Markdown"
	bot.Send(msg)

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
	var orderText strings.Builder
	orderText.WriteString(fmt.Sprintf("üî• *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"))

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	chat, err := bot.GetChat(tgbotapi.ChatInfoConfig{
		ChatConfig: tgbotapi.ChatConfig{
			ChatID: chatID,
		},
	})

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: %v", err)
		orderText.WriteString(fmt.Sprintf("–û—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: %d)\n\n", chatID))
	} else {
		orderText.WriteString(fmt.Sprintf("–û—Ç: @%s (ID: %d)\n\n", chat.UserName, chatID))
	}

	total := 0
	for _, item := range userCarts[chatID] {
		itemTotal := item.Dish.Price * item.Quantity
		orderText.WriteString(fmt.Sprintf("‚Ä¢ %s x%d = üíã%d\n", item.Dish.Name, item.Quantity, itemTotal))
		total += itemTotal
	}

	orderText.WriteString(fmt.Sprintf("\nüíã *–ò—Ç–æ–≥–æ:* %d –ø–æ—Ü–µ–ª—É–π—á–∏–∫–æ–≤", total))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
	adminMsg := tgbotapi.NewMessage(adminChatID, orderText.String())
	adminMsg.ParseMode = "Markdown"

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", fmt.Sprintf("complete_%d", chatID)),
		),
	)
	adminMsg.ReplyMarkup = keyboard

	bot.Send(adminMsg)

	// –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
	delete(userCarts, chatID)
}

func sendDefaultResponse(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, `–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòî

–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/cart - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É`)
	bot.Send(msg)
}
